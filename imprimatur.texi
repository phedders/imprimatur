\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename imprimatur.info
@settitle Imprimatur Manual
@c %**end of header
@setchapternewpage odd

@c The UPDATED date is updated automatically by the Emacs magic at the
@c end of this file.
@set UPDATED 17 September 2011
@set VERSION 1.0

@c This document contains examples of all the rendition macros, so it
@c must be rendered in PROOF mode.
@set PROOF
@include rendition.texi

@defcodeindex op
@defcodeindex fl

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex tp cp
@syncodeindex op cp
@syncodeindex fl cp

@copying
Published by the Free Software Foundation,
51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301 USA 

Copyright @copyright{} 2011 Sergey Poznyakoff

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with any Front and Back-Cover.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.
@end copying

@titlepage
@title Imprimatur -- a Texinfo Document Checker
@subtitle version @value{VERSION}, @value{UPDATED}
@author Sergey Poznyakoff.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnothtml
@page
@summarycontents
@page
@end ifnothtml
@contents

@ifnottex
@node Top
@top Imprimatur

This edition of the @cite{Imprimatur Manual}, last updated @value{UPDATED},
documents @command{Imprimatur} Version @value{VERSION}.
@end ifnottex

@menu
* Preface::
* Intro::               Introduction to Imprimatur.
* Renditions::          Renditions Define How the Document is Printed.
* Quick Start::         Integrating and Using Imprimatur
* Init::                Initializing the Package.
* Macros::              Texinfo Macros for Annotating the Document.
* Rules::               Makefile Rules Help Verify the Document.
* check-docs.sh::       Check for Missing Documentation Items.

* Reporting Bugs::      How to Report Bugs and Suggestions.

Appendices

* Copying This Manual::  The GNU Free Documentation License.
* Concept Index::        Index of Concepts.

@detailmenu
 --- The Detailed Node Listing ---

Integrating and Using Imprimatur

* Integration::         How to Integrate Imprimatur to a Project.
* Usage::               How to Use Imprimatur

@end detailmenu
@end menu

@node Preface
@chapter Preface
@cindex Fran@,{c}ois Pinard
@command{Imprimatur} is a set of Texinfo macros and Makefile rules to
verify consistency and, to certain extent, completeness of
Texinfo documentation.

This package was inspired in part by Fran@,{c}ois Pinard's
@file{rendition.texi} file we used in GNU tar's documentation.  It was
developed between 2005 and 2011 while writing documentation for
several other free software projects its author maintains: GNU
Mailutils, Dico and Pies, to name a few.  It was reorganized into a
standalone submodule project in 2011.

@node Intro
@chapter Introduction
@cindex annotation
Creating a documentation for software is a difficult task which is
equally important as writing the software itself.  In particular, it
is important that the documentation be consistent with the software it
describes and that it cover all aspects of its functionality and usage.

Usually the documentation, as well as the program itself, is not
written in one pass.  Rather it is created in a series of edits
and proofreadings.  During this process the author often needs to
insert @dfn{annotations} which are not intended for the end user,
but which, instead, serve as a reminder for the author himself about
pending editing tasks.  One may, for example, put a note saying that
certain paragraph needs to be reworded or that some feature needs to
be explained in greater detail and return to that note later in order
to fix it.  Quite often several authors take part in creating the
documentation.  In this case such annotations help coordinate their
work.

When preparing the document for publishing, it is important to make
sure that all such notes has been revised and none of them remain in
the document.

Keeping documentation in sync with the software is another
challenging task.  After adding a new feature the author not always
edits the documentation to reflect that.  In fact, quite often it is
impossible or undesirable, because the feature may imply some further
changes to another parts of the program, and the author may prefer to
update the docs when all the changes will have been finished.  In
this case, putting annotations in appropriate places of the document
will remind him that certain parts of it have become inaccurate and
need to be attended later.

@cindex imprimatur
@cindex Texinfo
@command{Imprimatur}@footnote{@samp{Imprimatur} is Latin for @samp{let
it be printed}.  Historically, this term was used to indicate that
there are no obstacles for printing a book.} aims to facilitate all
these tasks.  It is intended for documents written in Texinfo
(@pxref{Top, Texinfo,,texinfo,Texinfo Manual}).  The package provides
a mechanism for editor's annotations and a set of Makefile rules for
verifying the consistency of the document.

@node Renditions
@chapter Renditions
@cindex rendition, defined
The basic concept used in @command{Imprimatur} is the document
@dfn{rendition}.  The rendition defines how much editor's information
and annotations should appear in the resulting document.  There are
three possible renditions:

@defvr {Rendition} PROOF
This rendition is used for proofreading the document.  It inserts all
annotations in a prominent form, which makes it easy to revise the document.
@end defvr

@defvr {Rendition} DISTRIB
This rendition is intended for the documentation distributed with the
packaged versions and its online copies on the Web.  It inserts most
important annotations, so that the reader is aware about which parts
of the document are not fully revised for adequacy.  Dangling
cross-references are also prominently marked as such (@pxref{Dangling
cross-reference}).
@end defvr

@defvr {Rendition} PUBLISH
This rendition is intended for publishing printed copies of the
documentation.  It is supposed that by the time the document is ready
for publishing, all editor's and proofreader's annotations and
dangling references have been resolved and removed from the document.
Consequently, the use of annotation macros in this rendition results
in translation errors.  This helps prevent publishing incomplete or
inaccurate documentation.
@end defvr

@vrindex RENDITION
Default rendition is determined when configuring the package.  It can
be redefined when building the output, by using the @samp{RENDITION}
Makefile variable, e.g.:

@example
$ make RENDITION=PUBLISH
@end example

@node Quick Start
@chapter Integrating and Using Imprimatur
This chapter describes how to integrate @command{Imprimatur} to your
project and provides a brief overview on using it.

The project wishing to use @command{Imprimatur} must meet the
following requirements: it must use Autoconf and Automake and
it must use Git as a version control system.

@menu
* Integration::         How to Integrate Imprimatur to a Project.
* Usage::               How to Use Imprimatur
@end menu

@node Integration
@section Integration
@command{Imprimatur} is designed to be used as a Git submodule.  If
your project uses @command{git}, integrating it is quite
straightforward.

@enumerate 1
@item
@cindex submodule
@cindex git
First of all, you need to declare a submodule.  To do so, change into
the top source directory of your project and run:

@example
git submodule add git://git.gnu.org.ua/imprimatur.git imprimatur
git submodule init
@end example

This step needs to be done only once.  The first command will clone
the project to the directory @file{imprimatur}.  If you want another
name or need to place it deeper in the directory hierarchy, change the
last argument accordingly.  For example, to place @command{Imprimatur}
to the directory @file{doc/aux} use:

@example
git submodule add git://git.gnu.org.ua/imprimatur.git doc/aux
@end example

The second command initializes the submodule.

@item
@cindex Makefile.am, top level
@vrindex ACLOCAL_AMFLAGS
@vrindex SUBDIRS
Next step is to edit the top-level @file{Makefile.am}.  Add @option{-I
imprimatur} to the @samp{ACLOCAL_AMFLAGS} variable, and
@samp{imprimatur} directory to the @samp{SUBDIRS} variable.  For example:

@example
ACLOCAL_AMFLAGS = -I m4 -I imprimatur
SUBDIRS = imprimatur
@end example

If you chose another directory name during the first step, use it
instead of @samp{imprimatur} in the above example.

@item
@flindex configure.ac
Next, you need to edit the @file{configure.ac} file and add a call to
@samp{IMPRIMATUR_INIT}.  Normally no parameters are needed, just like
that:

@example
IMPRIMATUR_INIT
@end example

However, if you cloned @command{Imprimatur} into a directory with
another name, the actual directory name must be supplied as the first
argument.  For example:

@example
IMPRIMATUR_INIT(doc/aux)
@end example

@xref{Init}, for a detailed description of the @samp{IMPRIMATUR_INIT}
macro.

@item
@flindex doc/Makefile.am
Now edit the file @file{Makefile.am} located in the subdirectory where
you have your Texinfo sources.

@enumerate A
@item
@vrindex AM_MAKEINFOFLAGS
@vrindex IMPRIMATUR_MAKEINFOFLAGS
To the value of @samp{AM_MAKEINFOFLAGS} variable add
@samp{@@IMPRIMATUR_MAKEINFOFLAGS@@}.  This will inform
@command{makeinfo} and related tools about the location of
@command{Imprimatur} files (in particular, @file{rendition.texi}) and
the selected rendition (@pxref{Renditions}).

@item
@vrindex imprimatur_INPUT
Define the variable @samp{imprimatur_INPUT}.  It must contain the
names of Texinfo sources to be verified by @command{Imprimatur}.
Normally, the following definition is sufficient:

@example
imprimatur_INPUT=$(info_TEXINFOS) $(@var{base}_TEXINFOS)
@end example

@noindent
where @var{base} stands for the base name of your Texinfo document (e.g.
@samp{foo}, if it is named @file{foo.texi}).

@xref{Rules,imprimatur_INPUT}, for a discussion of this variable and
its purposes.

@item
@flindex imprimatur.mk
Include the file @file{imprimatur.mk} from the @command{Imprimatur}
directory using relative addressing.  For example, if your
documentation subdirectory is located at the same nesting level 
as the directory you cloned @command{Imprimatur} to, use:

@example
include ../imprimatur/imprimatur.mk
@end example

@emph{Do not use Automake substitutions nor Makefile variables in the
argument to include.}

@item
@flindex check-docs.sh
If you plan to use the @file{check-docs.sh} script, define a Makeinfo
variable to access it, e.g.:

@example
CHECK_DOCS=$(top_srcdir)/@@IMPRIMATUR_MODULE_DIR@@/check-docs.sh
@end example

@xref{check-docs.sh}, for a discussion of this script.
@end enumerate

Let's summarize this step by an example:

@example
AM_MAKEINFOFLAGS = @@IMPRIMATUR_MAKEINFOFLAGS@@
imprimatur_INPUT=$(info_TEXINFOS) $(foo_TEXINFOS)
include ../imprimatur/imprimatur.mk
CHECK_DOCS=$(top_srcdir)/@@IMPRIMATUR_MODULE_DIR@@/check-docs.sh
@end example
@end enumerate

@node Usage
@section How to Use Imprimatur
@flindex rendition.texi
To use @command{Imprimatur}, you need to include the file
@file{rendition.texi} into your main Texifo source file:

@example
@@include rendition.texi
@end example

This file provides you with macros for annotating your documentation.
These macros are described in detail in @ref{Macros}.  Here we present
a short overview.

The most common form of annotation is the @samp{@@FIXME} macro.  It
introduces an editor's note about something that needs a revision or
clarification.  For example:

@example
The @@var@{fmt@} argument is a database format identifier.
If it is valid, the function returns expiration interval for that
format.  @@FIXME@{It is not clear how to obtain negative expiration
values.@}
@end example

In @samp{PROOF} rendition, this Texinfo excerpt produces the following
output:

@display
@group
The @var{fmt} argument is a database format identifier.
If it is valid, the function returns expiration interval for that
format.  @example-FIXME{It is not clear how to obtain negative expiration
values.}
@end group
@end display

In other renditions, the @samp{@@FIXME} macro produces no output at
all.

It is supposed that you will be progressively @dfn{resolving} your
@samp{@@FIXME}s while reviewing your document.  During this process
you can obtain a listing of all pending @samp{@@FIXME} notes bu
running @code{make imprimatur-fixmes}, e.g.:

@example
@cartouche
$ make imprimatur-fixmes
Unresolved FIXMEs:
functions.texi:2231: It is not clear how to obtain negative expiration
@end cartouche
@end example

It is especially handy if you use @samp{compile} mode of GNU Emacs, as
you can then easily move editing point to the place when
a particular note appears by placing the cursor on the corresponding
line and hitting @kbd{Enter} (@pxref{Compilation Mode,,,emacs,The Emacs
Editor}).

Another common annotation is the @samp{@@UNREVISED} macro.  Placed
after a sectioning command, it will draw reviewer's attention to nodes
that need a revision.  A listing of such nodes can be obtaining using
the @samp{imprimatur-unrevised} rule:

@example
@cartouche
$ make imprimatur-unrevised
Unrevised nodes:
mailfromd.texi:2567:@@UNREVISED
functions.texi:1508:@@UNREVISED
@end cartouche
@end example

The @samp{@@UNREVISED} macro produces output in @samp{PROOF} and
@samp{DISTRIB} renditions.  In @samp{PUBLISH} rendition it results in
compilation error.  This behavior is intended to help avoid unrevised
nodes from appearing in final published texts.

When writing initial revision of a node you may need to mark a point
where a cross-reference to another, not yet written node should be.
The intent is to replace this mark with an actual cross-reference
command when the node referred to has already been written.  For that
purpose @command{Imprimatur} provides three annotations:
@samp{@@FIXME-ref}, @samp{@@FIXME-xref}, and @samp{@@FIXME-pxref}.
These macros are similar to corresponding Texinfo commands, except
that they take a single argument.  In fact in @samp{PUBLISH} rendition
these macros are equivalent to their Texinfo counterparts.  In 
@samp{PROOF} and @samp{DISTRIB} rendition, however, they produce a
cross-reference explicitly marked as referencing a non-existent node.
For example:

@example
@group
Enable transcript of @@acronym@{SMTP@} sessions to the log
channel.  @@FIXME-xref@{Logging and Debugging@}.
@end group
@end example

This Texinfo fragment produces:

@display
@group
Enable transcript of @acronym{SMTP} sessions to the log
channel.  @example-FIXME-xref{Logging and Debugging}.
@end group
@end display

To list unresolved cross-reference use the @samp{imprimatur-refs}
Makefile rule:

@example
@cartouche
$ make imprimatur-refs
Unresolved cross-references:
options.texi:4951: Logging and Debugging
@end cartouche
@end example

@node Init
@chapter Initialization

@deffn {Autoconf Macro} IMPRIMATUR_INIT (@var{dir}, @var{options})
Initializes @command{Imprimatur} framework.  Both arguments are
optional.  The @var{dir} argument, if supplied, specifies the
directory you cloned @command{Imprimatur} into.  It defaults to
@samp{imprimatur}, so that if you follow the default setup described
in @ref{Usage} you don't need to supply this argument.

The @var{options} argument is a whitespace-separated list of options.
Following options are recognized:

@cindex rendition, default
@cindex default rendition
@defvr {Option} PROOF
Set the default rendition to @samp{PROOF}.
@end defvr

@defvr {Option} DISTRIB
Set the default rendition to @samp{DISTRIB}.
@end defvr

@defvr {Option} PUBLISH
Set the default rendition to @samp{PUBLISH}.
@end defvr

@vindex VERSION
@kindex AC_INIT
If none of these three options is given, @command{IMPRIMATUR_INIT}
will select default rendition based on the version number of the
hosting package, i.e. the @samp{VERSION} variable, as set
by @code{AC_INIT} macro.  The version number should consist of
up to three integers, separated by dots.  The first integer is the
@dfn{major number}, the second one is the @dfn{minor number}, and the
third one is the @dfn{patchlevel}.  Given that, the following
algorithm is used:

@enumerate 1
@item
If patchlevel is present, then:

@enumerate a
@item
If it is less than 50, @samp{DISTRIB} rendition is selected.

@item
Otherwise, the package is considered an alpha release and @samp{PROOF}
rendition is selected.
@end enumerate

@item
If patchlevel is not present, @samp{DISTRIB} is used.
@end enumerate

@defvr {Option} frenchspacing
Assume French sentence spacing.  @xref{frenchspacing,,,texinfo,
Texinfo Manual}, for a description of the two possible sentence
spacings.

By default, American sentence spacing is assumed.  This option affects
the @samp{imprimatur-check-sentence-spacing} Makefile rule, which
verifies whether sentence spacing is used consistently throughout the
document.  @xref{imprimatur-check-sentence-spacing}.
@end defvr

@defvr {Option} makedoc
Enables Makefile rules for building @command{Imprimatur}
documentation.  This is intended mostly for @command{Imprimatur}
maintainers, but you may use this option to build your own, perhaps
customized, copies of this manual.
@end defvr
@end deffn

The @code{IMPRIMATUR_INIT} macro defines several substitution
variables, which you can use in your @file{Makefile.am} files.

@defvr {Substitution Variable} IMPRIMATUR_MODULE_DIR
The name of the directory @command{Imprimatur} was cloned into.  This
name is relative to the top source directory.  It helps address files
from the @command{Imprimatur} subdirectory.  For example:

@example
CHECK_DOCS=$(top_srcdir)/@@IMPRIMATUR_MODULE_DIR@@/check-docs.sh
@end example
@end defvr

@vindex AM_MAKEINFOFLAGS
@defvr {Substitution Variable} IMPRIMATUR_MAKEINFOFLAGS
Additional options for @command{makeinfo} and compatible tools, which
inform them about location of @command{Imprimatur} Texinfo files.  You
need to add this variable to your @samp{AM_MAKEINFOFLAGS} variable:

@example
AM_MAKEINFOFLAGS = @@IMPRIMATUR_MAKEINFOFLAGS@@
@end example
@end defvr

@defvr {Substitution Variable} RENDITION
Default rendition.  You may need this variable to inform various tools
about the selected rendition level, e.g.:

@example
TEXI2DVI=texi2dvi -t '@@set $(RENDITION)'
@end example

Note, that @samp{IMPRIMATUR_MAKEINFOFLAGS} includes the option
@option{-D $(RENDITION)}, so you don't need to define it explicitly if
the tool in question uses this variable.
@end defvr

@node Macros
@chapter Texinfo Macros
@flindex rendition.texi
The file @file{rendition.texi} defines helper macros which serve to
annotate Texinfo sources.  Expansion of these macros depends on the
rendition of the document.

@defmac WRITEME
Use this macro to mark the nodes which need to be written.  Normally,
you would place it immediately after a sectioning command.  When in
@samp{PUBLISH} rendition, this macro forces compilation error, because
one would hardly want empty nodes to appear in the published document.
Otherwise, it produces the following text:

@quotation
@example-WRITEME
@end quotation
@end defmac

@defmac UNREVISED
Use this macro to mark the nodes which need a revision.  Normally,
you would place it immediately after a sectioning command.

This macro acts similarly to @samp{@@WRITEME}.  When in
@samp{PUBLISH} rendition, it forces a compilation error.  In
@samp{PROOF} and @samp{DISTRIB} renditions, it produces the following
expansion:

@quotation
@example-UNREVISED
@end quotation
@end defmac

@defmac FIXME (@var{text})
The @samp{@@FIXME} macro adds an editor's note to the file.  The
argument @var{text} gives the content of the note.

The purpose of the note is to draw reviewer's attention to
something near this point of the document.  It is of some importance
only to the author and reviewers of the document, so it produces
output only in @samp{PROOF} revision.  Consider, for example, this
text:

@example
The @@option@{-I @@var@{DIR@}@} command line option adds a directory 
to the program's search path.  @@FIXME@{Document the initial value 
of the search path.@}
@end example

In @samp{PROOF} rendition it would produce the following:

@quotation
The @option{-I @var{DIR}} command line option adds a directory to the
program's search path.  @example-FIXME{Document the initial value of the
search path.}
@end quotation
@end defmac

The three macros below serve as placeholders for the corresponding
cross-reference commands:

@defmac FIXME-ref (@var{text})
Use this macro for @samp{@@ref}-style cross-references.  In
@samp{PUBLISH} rendition it is entirely equivalent to
@code{@@ref@{@var{text}@}}.
@end defmac

@defmac FIXME-xref (@var{text})
Use this macro for @samp{@@xref}-style cross-references.  In
@samp{PUBLISH} rendition it is equivalent to
@code{@@xref@{@var{text}@}}.
@end defmac

@defmac FIXME-pxref (@var{text})
Use this macro for @samp{@@pxref}-style cross-references.  In
@samp{PUBLISH} rendition it is entirely equivalent to
@code{@@pxref@{@var{text}@}}.
@end defmac

@anchor{Dangling cross-reference}
Use one of these macros when you need to add a cross-reference to a node or
anchor which does not exist yet.  They will create a @dfn{dangling reference}
which allows for translating Texinfo source without errors, and at the
same time serves as a reminder to you that the node referred to still
needs to be written (@pxref{Rules, imprimatur-fixmes}).  Once you
create the node, you will fix the reference by simply removing the
@samp{FIXME-} prefix after the @samp{@@} sign.

To illustrate the output produced by these macros, consider the
following Texinfo fragment:

@example
@@FIXME-xref@{regexp@}, for more information about regular expressions.
@end example

In @samp{PROOF} mode it produces:

@quotation
@example-FIXME-xref{regexp}, for more information about regular expressions.
@end quotation

In @samp{DISTRIB} rendition, the output is:

@quotation
@ifhtml
@html
See <span class="deadlink">regexp</span>,
for more information about regular expressions.
@end html
@end ifhtml
@ifnothtml
See @i{regexp}, for more information about regular expressions.
@end ifnothtml
@end quotation

@ignore
The following macros are internal and are not supposed to be
user-visible.  The following lines pacify the `check-macros'
rule (see Makefile.am):

@defmac FIXMEREF
@defmac deadlink
@defmac editorsnote
@defmac example-FIXME
@defmac example-FIXME-xref
@defmac example-UNREVISED
@defmac example-WRITEME
@end ignore

@node Rules
@chapter Makefile Rules
@cindex rules, Makefile
@cindex Makefile
@flindex imprimatur.mk
The file @file{imprimatur.mk} contains Makefile rules for verifying
the Texinfo documents.  It should be included into @file{Makefile.am}
located in the directory where Texinfo sources reside.  For example,
if your documentation subdirectory is located at the same nesting
level as the directory you cloned @command{imprimatur} into, then
add the following statement:

@example
include ../imprimatur/imprimatur.mk
@end example

Note that Automake is supposed to expand this statement, i.e. to
replace it with the actual contents of @file{imprimatur.mk} in the
resulting @file{Makefile.in}.  This is possible only if the argument
to @code{include} is a literal string.  Do not use Automake
substitutions nor Makefile variables in the argument to include.

The rules defined in @file{imprimatur.mk} operate on Texinfo documents
listed in the variable @samp{imprimatur_INPUT}

@defvr {Makefile Variable} imprimatur_INPUT
@vindex info_TEXINFOS
Whitespace-delimited list of Texinfo source files to process.  It is
often convenient to specify source files via the
@samp{@var{name}_TEXINFOS} Automake variables.  For example, if your
main source has the name @file{myproj.texi} it would normally be added
to the Makefile variable @samp{info_TEXINFOS} and the variable
@samp{myproj_TEXINFOS} would contain subordinate Texinfo sources
it depends on.  Then, you would declare @samp{imprimatur_INPUT} 
as follows:

@example
imprimatur_INPUT=$(info_TEXINFOS) $(myproj_TEXINFOS)
@end example
@end defvr

Once this variable is defined, you can use the following rules:

@deffn {Makefile Rule} imprimatur-format
Checks whether the files contain tabs (ASCII 9).  If so the following
diagnostics is displayed:

@example
@cartouche
Sources contain tabs; run make imprimatur-untabify
@end cartouche
@end example

@xref{imprimatur-untabify}.
@end deffn

@deffn {Makefile Rule} imprimatur-refs
Checks if the sources contain unresolved cross-references, i.e. any of
the macros @samp{FIXME-ref}, @samp{FIXME-xref} or @samp{FIXME-pxref}
(@pxref{Macros, FIXME-ref}).  If so, the prominent diagnostics is
displayed and the rule exits with code 2.  For example:

@example
@cartouche
Unresolved cross-references:
mailfromd.texi:3535: existing categories
mailfromd.texi:4951: optimizer
mailfromd.texi:9899: debug configuration
functions.texi:1273: filter chains
@end cartouche
@end example
@end deffn

@deffn {Makefile Rule} imprimatur-fixmes
Checks whether the sources contain @samp{@@FIXME} macros (@pxref{Macros,
FIXME}).  If so, list the location of each @samp{@@FIXME} along with
its content.  If the content has several lines, only first of them is
displayed.  For example:

@example
@cartouche
Unresolved FIXMEs:
functions.texi:1518: Check references to 'Polling functions' 
functions.texi:1562: Give more details and references.
functions.texi:2231: How to obtain negative
@end cartouche
@end example
@end deffn

@deffn {Makefile Rule} imprimatur-writemes
Checks whether the sources contain empty nodes, i.e. nodes marked
with the @samp{@@WRITEME} macro (@pxref{Macros, WRITEME}).  If so,
it displays locations of each @samp{@@WRITEME}, e.g.:

@example
@cartouche
Empty nodes:
calloutd.texi:6:@@WRITEME
mfdbtool.texi:148:@@WRITEME
@end cartouche
@end example
@end deffn

@deffn {Makefile Rule} imprimatur-empty-nodes
An improved version of @samp{imprimatur-writemes}.  This rule
reports nodes which do not have any text and those marked with
the @samp{@@WRITEME} macro.

Unlike the rest of rules, @samp{imprimatur-empty-nodes} analyzes files in
@samp{$(info_TEXINFOS)}.  It reads each file and parses it, honoring
any @samp{@@include} statements.

This rule outputs to standard error the names and locations of empty
nodes.  For nodes marked with the @samp{@@WRITEME} macro, location
refers to the place where the macro was encountered and the actual node
name is prefixed with @samp{(@@WRITEME)}, as shown in the example below:

@example
@cartouche
Empty nodes:
./calloutd.texi:6: calloutd
./mfdbtool.texi:148: Configuring mfdbtool
./upgrade.texi:31: (@@WRITEME) Upgrading from 7.0 to 8.0
@end cartouche
@end example

@cindex imprimatur-ignore
If you wish to excerpt any of the input files from being verified by
this rule, you can do so by adding the following @dfn{pragmatic
comment} at the beginning of such files:

@example
@@c imprimatur-ignore
@end example
@end deffn

@deffn {Makefile Rule} imprimatur-unrevised
Checks whether the sources contain nodes which need revision, i.e. the
ones marked with the @samp{@@UNREVISED} macro (@pxref{Macros,
UNREVISED}).  If so, display locations of each @samp{@@UNREVISED}, e.g.:

@example
@cartouche
Unrevised nodes:
mailfromd.texi:2567:@@UNREVISED
mailfromd.texi:2694:@@UNREVISED
@end cartouche
@end example
@end deffn

@anchor{imprimatur-check-sentence-spacing}
@deffn {Makefile Rule} imprimatur-check-sentence-spacing
Checks if sentence spacing is correct throughout the sources.  By
default, American sentence spacing is assumed.  French sentence
spacing is used if @code{IMPRIMATUR_INIT} was called with the
@samp{frenchspacing} option (@pxref{Init, frenchspacing}).

If the sentence spacing is wrong, this rule displays the following
diagnostics: 

@example
@group
Sources contain single-space sentence separators.
Run make imprimatur-fix-sentence-spacing to fix.
@end group
@end example

If French spacing is declared, the diagnostics will read:

@example
@group
Sources contain double-space sentence separators.
Run make imprimatur-fix-sentence-spacing to fix.
@end group
@end example
@end deffn

@deffn {Makefile Rule} imprimatur-fix-sentence-spacing
Fixes sentence spacing.  The action of this rule depends on the
setting of @samp{frenchspacing} option (@pxref{Init, frenchspacing}).
@end deffn

@deffn {Makefile Rule} imprimatur-basic-checks
Runs the following rules in that order:

@example
imprimatur-format
imprimatur-check-sentence-spacing
imprimatur-refs
imprimatur-fixmes
imprimatur-empty-nodes
imprimatur-unrevised
@end example
@end deffn

@deffn {Makefile Rule} imprimatur-master-menu
@vrindex info_TEXINFOS
Creates a master menu for each Texinfo file in
@samp{$@{info_TEXINFOS@}}, taking into account included files.

This rule uses @command{Emcas} to create a master menu that follows
the top node.  The master menu includes every entry from all the other
menus.  It replaces any existing ordinary menu that follows the top
node.

The effect of this rule differs from that of
@code{texinfo-master-menu} (@pxref{Updating
Commands,texinfo-master-menu,,texinfo,Texinfo Manual}) in that it
takes into account included Texinfo files.
@end deffn

@anchor{imprimatur-untabify}
@deffn {Makefile Rule} imprimatur-untabify
Converts all tabs in Texinfo files to multiple spaces, preserving
columns.  This rule uses @command{emacs} to do the job.
@end deffn

@deffn {Makefile Rule} imprimatur-final
Runs @samp{imprimatur-untabify} and @samp{imprimatur-master-menu}.
@end deffn

@node check-docs.sh
@chapter check-docs.sh
@cindex check-docs.sh
The shell script @file{check-docs.sh} provides a mechanism for
verifying if all items declared in a program are documented in its
Texinfo docs.  By @dfn{items} we mean here any external entities
visible by the end user and designed for his use, such as command line
options, configuration statements, external functions and the like.
Any such item is supposed to have the following properties:

@table @dfn
@item class
A descriptive name for the group of items this one belongs to.  It is
intended to be human readable and can consist of arbitrary number of
characters.  E.g.  @samp{Command line option} or @samp{External
function}, or the like.

The script prints class name at the beginning of its output.

@item identifier
A string of characters uniquely identifying this item among other
items of the same class.  E.g., a function name if the item is a function,
or option name (without the leading dashes) if the item is a command
line option.

@item declaration
A statement in the source code where this item is declared.  E.g. a
function declaration or option definition.  The declaration must
contain item identifier so that it can be extracted from it using a
regular expression.

@item description
A statement in the Texinfo document which contains a description of
this item.  It must meet the same requirement as the declaration,
i.e. it should be possible to define a regular expression for
extracting the item identifier from the description.
@end table

The script is invoked as follows:

@example
check-docs.sh @var{code-sed} @var{doc-sed} @var{sources} -- @var{makeinfo-args}
@end example

Notice mandatory double-dash.

Its arguments are:

@table @var
@item class
Item class.  Make sure you quote it, if it contains characters special
for the shell.

@item code-sed
A regular expression to extract item identifiers from declarations.  It
must use parenthesized group to mark the identifier (@pxref{The "s"
Command,,REPLACEMENT,sed,Sed Manual}), and the @samp{p} flag or
command to output it (@pxref{Common Commands,,Print out the pattern
space, sed, Sed Manual}).

For example, the following expression extracts function name from its
declaration in C code:

@example
s/^\([_a-zA-Z][_a-zA-Z0-9]*\) *(.*/\1/p
@end example

It assumes that identifiers start in column 0 and is simplified a bit.

@item doc-sed
A regular expression to extract item identifiers from descriptions.
It is in all respects similar to @var{code-sed}.

For example, the expression below extracts identifiers from
@samp{@@defmac} statements:

@example
'/@@defmac/s/@@defmac  *\([-a-zA-Z][-a-zA-Z0-9]*\).*/\1/p'
@end example

@item sources
A list of source files to apply @var{code-sed} to.

@item makeinfo-args
A command which produces preprocessed Texinfo source at its output.
Normally, it is @command{makeinfo -E -}.  The @var{doc-sed} expression
is applied to its output.
@end table

The @file{check-docs.sh} script collects identifiers produced by the
two sed expressions and computes two sets of differences: 
identifiers missing from the docs, but present in the sources and the
ones missing from the sources but present in the docs.  If both lists
are empty, the script exits silently with status @samp{0}.  Otherwise,
it reports the differences and exits with status @samp{1}.

The script is normally used from Makefile rules in the
@file{Makefile.am} file located in the documentation directory.  You
may have any number of such rules, each one for a particular class of
items.  It is recommended to declare a Makeinfo variable pointing to
the script, such as:

@example
CHECK_DOCS = $(top_srcdir)/@@IMPRIMATUR_MODULE_DIR@@/check-docs.sh
@end example

The @var{makeinfo-args} parameter is usually as follows:

@example
$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -E - $(info_TEXINFOS) 
@end example

To illustrate this, here is a Makefile rule used by
@command{Imprimatur} itself to verify that all rules from
@file{imprimatur.mk} are documented:

@example
@group
check-rules:
        @@$(CHECK_DOCS) "Makefile rules" \
         '/^imprimatur-.*:/s/:.*//p' \
         's/@@deffn @{Makefile Rule@}  *//p' \
         imprimatur.mk -- \
         $(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) \
                -I $(srcdir) -E - $(info_TEXINFOS)
@end group
@end example

To illustrate its output, suppose that the rule
@samp{imprimatur-fixmes} is not documented.  Then, you will get:


@display
@group
$ make -k check-rules
Not documented Makefile rules:
imprimatur-fixmes
@end group
@end display

Similarly, if the docs document rule @samp{imprimatur-fixme}
(presumably a typo: the @samp{s} is missing), you'll get:

@display
@group
$ make -k check-rules
Non-existing Makefile rules:
imprimatur-fixme
@end group
@end display

In both cases, the exit code will indicate an error.

@node Reporting Bugs
@chapter Reporting Bugs
Send bug reports and suggestions to @email{gray+imprimatur@@gnu.org.ua}.

If you think you've found a bug, please be sure to include maximum
information available to reliably reproduce, or at least to
analyze it.  Please, include the version of the package you are using
and a description of the bug: what you did, what result did you get
and how it differs from what you expected.  If possible, include a
short test case with the steps needed to reproduce the bug.

Any errors, typos or omissions found in this manual also qualify as
bugs.  Please report them, if you happen to find any.

@node Copying This Manual
@appendix GNU Free Documentation License
@include fdl.texi

@node Concept Index
@unnumbered Concept Index

This is a general index of all issues discussed in this manual:

@printindex cp

@bye

Local Variables:
eval: (add-hook 'write-file-hooks 'time-stamp)
time-stamp-start: "@set UPDATED "
time-stamp-line-limit: 20
time-stamp-format: "%:d %:B %:y"
time-stamp-end: "\n"
End:
